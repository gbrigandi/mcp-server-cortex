name: Release Build

on:
  push:
    tags:
      - 'v*' # Trigger on version tags like v0.1.0

permissions:
  contents: write # Needed to create releases

jobs:
  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

  build_binaries:
    name: Build Binaries for ${{ matrix.target }}
    needs: create_release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            asset_name_suffix: linux-amd64
            output_name: mcp-server-cortex
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            asset_name_suffix: windows-amd64.exe
            output_name: mcp-server-cortex.exe
          - os: macos-latest # Intel runner
            target: x86_64-apple-darwin
            asset_name_suffix: macos-amd64
            output_name: mcp-server-cortex
          - os: macos-14 # ARM64/M1 runner
            target: aarch64-apple-darwin
            asset_name_suffix: macos-arm64
            output_name: mcp-server-cortex
    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust for target ${{ matrix.target }}
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install musl-tools (Linux MUSL target only)
        if: matrix.os == 'ubuntu-latest' && contains(matrix.target, 'musl')
        run: |
          sudo apt-get update -y
          sudo apt-get install -y musl-tools

      - name: Build binary
        run: cargo build --verbose --release --target ${{ matrix.target }}

      - name: Import Apple Certificate (macOS only)
        if: matrix.os == 'macos-latest' || matrix.os == 'macos-14'
        env:
          APPLE_CERTIFICATE_BASE64: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        run: |
          # Create temporary keychain with proper extension
          security create-keychain -p temp-password build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p temp-password build.keychain
          security set-keychain-settings -lut 21600 build.keychain
          
          # Add build keychain to search list
          security list-keychains -d user -s build.keychain $(security list-keychains -d user | sed s/\"//g)
          
          # Import certificate with -A flag to avoid access control issues
          echo "$APPLE_CERTIFICATE_BASE64" | base64 --decode > certificate.p12
          
          # Import certificate (should contain both cert and private key)
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -A -T /usr/bin/codesign
          
          # Import Apple intermediate certificate (DER format)
          curl -o DeveloperIDG2CA.cer https://www.apple.com/certificateauthority/DeveloperIDG2CA.cer
          security import DeveloperIDG2CA.cer -k build.keychain -A -T /usr/bin/codesign
          
          # Import Apple Worldwide Developer Relations CA G3 (DER format)
          curl -o AppleWWDRCAG3.cer https://www.apple.com/certificateauthority/AppleWWDRCAG3.cer
          security import AppleWWDRCAG3.cer -k build.keychain -A -T /usr/bin/codesign
          
          # Set partition list to avoid password prompts
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k temp-password build.keychain
          
          # Clean up certificate files
          rm certificate.p12 DeveloperIDG2CA.cer AppleWWDRCAG3.cer

      - name: Code Sign Binary (macOS only)
        if: matrix.os == 'macos-latest' || matrix.os == 'macos-14'
        env:
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
        run: |
          # Check identities in build keychain
          echo "=== Code signing identities in build.keychain ==="
          security find-identity -v -p codesigning build.keychain || true
          
          # Extract signing identity hash from build keychain
          SIGNING_HASH=$(security find-identity -v -p codesigning build.keychain | grep "$APPLE_SIGNING_IDENTITY" | grep -oE "[0-9A-F]{40}" | head -n 1)
          echo "Using signing hash: $SIGNING_HASH"
          
          # Sign the binary using the SHA-1 hash
          /usr/bin/codesign --force --sign "$SIGNING_HASH" --timestamp --options runtime ./target/${{ matrix.target }}/release/${{ matrix.output_name }} -v
          
          # Verify signature
          /usr/bin/codesign --verify --verbose ./target/${{ matrix.target }}/release/${{ matrix.output_name }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./target/${{ matrix.target }}/release/${{ matrix.output_name }}
          asset_name: mcp-server-cortex-${{ matrix.asset_name_suffix }}
          asset_content_type: application/octet-stream

